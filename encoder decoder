module encoder_8to3 (
    input [7:0] in,     // 8-bit input
    output reg [2:0] out // 3-bit output
);
    always @(*) begin
        case (in)
            8'b00000001: out = 3'b000;
            8'b00000010: out = 3'b001;
            8'b00000100: out = 3'b010;
            8'b00001000: out = 3'b011;
            8'b00010000: out = 3'b100;
            8'b00100000: out = 3'b101;
            8'b01000000: out = 3'b110;
            8'b10000000: out = 3'b111;
            default: out = 3'b000; // Default case for error or no input
        endcase
    end
endmodule


`timescale 1ns / 1ps

module encoder_tb();
    reg [7:0] encoder_in;
    wire [2:0] encoder_out;

    // Instantiate the Encoder module
    encoder_8to3 uut (
        .in(encoder_in),
        .out(encoder_out)
    );

    initial begin
        // Monitor values
        $monitor("Time=%0t | encoder_in=%b | encoder_out=%b", $time, encoder_in, encoder_out);

        // Apply test cases
        encoder_in = 8'b00000001; #10;  // Input: 00000001 -> Output: 000
        encoder_in = 8'b00000010; #10;  // Input: 00000010 -> Output: 001
        encoder_in = 8'b00000100; #10;  // Input: 00000100 -> Output: 010
        encoder_in = 8'b00001000; #10;  // Input: 00001000 -> Output: 011
        encoder_in = 8'b00010000; #10;  // Input: 00010000 -> Output: 100
        encoder_in = 8'b00100000; #10;  // Input: 00100000 -> Output: 101
        encoder_in = 8'b01000000; #10;  // Input: 01000000 -> Output: 110
        encoder_in = 8'b10000000; #10;  // Input: 10000000 -> Output: 111

        encoder_in = 8'b00000000; #10;  // Default case -> Output: 000

        $finish;  // End simulation
    end
endmodule

module decoder_3to8 (
    input [2:0] in,    // 3-bit input
    output reg [7:0] out // 8-bit output
);
    always @(*) begin
        case (in)
            3'b000: out = 8'b00000001;
            3'b001: out = 8'b00000010;
            3'b010: out = 8'b00000100;
            3'b011: out = 8'b00001000;
            3'b100: out = 8'b00010000;
            3'b101: out = 8'b00100000;
            3'b110: out = 8'b01000000;
            3'b111: out = 8'b10000000;
            default: out = 8'b00000000; // Default case for error or no input
        endcase
    end
endmodule


`timescale 1ns / 1ps

module decoder_tb();
    reg [2:0] decoder_in;
    wire [7:0] decoder_out;

    // Instantiate the Decoder module
    decoder_3to8 uut (
        .in(decoder_in),
        .out(decoder_out)
    );

    initial begin
        // Monitor values
        $monitor("Time=%0t | decoder_in=%b | decoder_out=%b", $time, decoder_in, decoder_out);

        // Apply test cases
        decoder_in = 3'b000; #10;  // Input: 000 -> Output: 00000001
        decoder_in = 3'b001; #10;  // Input: 001 -> Output: 00000010
        decoder_in = 3'b010; #10;  // Input: 010 -> Output: 00000100
        decoder_in = 3'b011; #10;  // Input: 011 -> Output: 00001000
        decoder_in = 3'b100; #10;  // Input: 100 -> Output: 00010000
        decoder_in = 3'b101; #10;  // Input: 101 -> Output: 00100000
        decoder_in = 3'b110; #10;  // Input: 110 -> Output: 01000000
        decoder_in = 3'b111; #10;  // Input: 111 -> Output: 10000000

        $finish;  // End simulation
    end
endmodule
