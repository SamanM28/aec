// AND Gate
module AND_Gate(input A, input B, output Y);
    assign Y = A & B;
endmodule

module Testbench_AND;
    reg A, B;
    wire Y;

    AND_Gate and_gate (.A(A), .B(B), .Y(Y));

    initial begin
        $monitor("A=%b, B=%b, Y=%b", A, B, Y);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule

// OR Gate
module OR_Gate(input A, input B, output Y);
    assign Y = A | B;
endmodule

module Testbench_OR;
    reg A, B;
    wire Y;

    OR_Gate or_gate (.A(A), .B(B), .Y(Y));

    initial begin
        $monitor("A=%b, B=%b, Y=%b", A, B, Y);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule

// NOT Gate
module NOT_Gate(input A, output Y);
    assign Y = ~A;
endmodule

module Testbench_NOT;
    reg A;
    wire Y;

    NOT_Gate not_gate (.A(A), .Y(Y));

    initial begin
        $monitor("A=%b, Y=%b", A, Y);
        A = 0; #10;
        A = 1; #10;
    end
endmodule

// NAND Gate
module NAND_Gate(input A, input B, output Y);
    assign Y = ~(A & B);
endmodule

module Testbench_NAND;
    reg A, B;
    wire Y;

    NAND_Gate nand_gate (.A(A), .B(B), .Y(Y));

    initial begin
        $monitor("A=%b, B=%b, Y=%b", A, B, Y);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule

// NOR Gate
module NOR_Gate(input A, input B, output Y);
    assign Y = ~(A | B);
endmodule

module Testbench_NOR;
    reg A, B;
    wire Y;

    NOR_Gate nor_gate (.A(A), .B(B), .Y(Y));

    initial begin
        $monitor("A=%b, B=%b, Y=%b", A, B, Y);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule

// XOR Gate
module XOR_Gate(input A, input B, output Y);
    assign Y = A ^ B;
endmodule

module Testbench_XOR;
    reg A, B;
    wire Y;

    XOR_Gate xor_gate (.A(A), .B(B), .Y(Y));

    initial begin
        $monitor("A=%b, B=%b, Y=%b", A, B, Y);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule

// XNOR Gate
module XNOR_Gate(input A, input B, output Y);
    assign Y = ~(A ^ B);
endmodule

module Testbench_XNOR;
    reg A, B;
    wire Y;

    XNOR_Gate xnor_gate (.A(A), .B(B), .Y(Y));

    initial begin
        $monitor("A=%b, B=%b, Y=%b", A, B, Y);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule
