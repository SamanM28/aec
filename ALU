module ALU(
    input [3:0] A, B,
    input [2:0] op,
    output reg [3:0] result,
    output reg carry_out
);
    always @(*) begin
        carry_out = 0;
        case (op)
            3'b000: {carry_out, result} = A + B;        // Addition
            3'b001: {carry_out, result} = A - B;        // Subtraction
            3'b010: result = A & B;                    // AND
            3'b011: result = A | B;                    // OR
            3'b100: result = A ^ B;                    // XOR
            3'b101: result = ~A;                       // NOT
            3'b110: result = A << 1;                   // Left shift
            3'b111: result = A >> 1;                   // Right shift
            default: result = 4'b0000;
        endcase
    end
endmodule








`timescale 1ns / 1ps

module ALU_tb();
    reg [3:0] A, B;
    reg [2:0] op;
    wire [3:0] result;
    wire carry_out;

    ALU uut (
        .A(A), 
        .B(B), 
        .op(op), 
        .result(result), 
        .carry_out(carry_out)
    );

    initial begin
        // Monitor changes
        $monitor("Time=%0t | A=%b | B=%b | op=%b | result=%b | carry_out=%b",
                  $time, A, B, op, result, carry_out);

        // Test cases
        A = 4'b0011; B = 4'b0001; op = 3'b000; #10; // Addition
        A = 4'b0100; B = 4'b0001; op = 3'b001; #10; // Subtraction
        A = 4'b0101; B = 4'b0011; op = 3'b010; #10; // AND
        A = 4'b0101; B = 4'b0011; op = 3'b011; #10; // OR
        A = 4'b0101; B = 4'b0011; op = 3'b100; #10; // XOR
        A = 4'b0101; B = 4'bxxxx; op = 3'b101; #10; // NOT
        A = 4'b0101; B = 4'bxxxx; op = 3'b110; #10; // Left Shift
        A = 4'b0101; B = 4'bxxxx; op = 3'b111; #10; // Right Shift

        // End of simulation
        $finish;
    end
endmodule
