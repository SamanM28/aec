// Half Adder
module Half_Adder(input A, input B, output Sum, output Carry);
    assign Sum = A ^ B;
    assign Carry = A & B;
endmodule

module Testbench_Half_Adder;
    reg A, B;
    wire Sum, Carry;

    Half_Adder half_adder (.A(A), .B(B), .Sum(Sum), .Carry(Carry));

    initial begin
        $monitor("A=%b, B=%b, Sum=%b, Carry=%b", A, B, Sum, Carry);
        A = 0; B = 0; #10;
        A = 0; B = 1; #10;
        A = 1; B = 0; #10;
        A = 1; B = 1; #10;
    end
endmodule

// Full Adder
module Full_Adder(input A, input B, input Cin, output Sum, output Carry);
    assign Sum = A ^ B ^ Cin;
    assign Carry = (A & B) | (B & Cin) | (A & Cin);
endmodule

module Testbench_Full_Adder;
    reg A, B, Cin;
    wire Sum, Carry;

    Full_Adder full_adder (.A(A), .B(B), .Cin(Cin), .Sum(Sum), .Carry(Carry));

    initial begin
        $monitor("A=%b, B=%b, Cin=%b, Sum=%b, Carry=%b", A, B, Cin, Sum, Carry);
        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 1; B = 0; Cin = 0; #10;
        A = 1; B = 1; Cin = 0; #10;
        A = 0; B = 0; Cin = 1; #10;
        A = 0; B = 1; Cin = 1; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 1; #10;
    end
endmodule
